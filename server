#!/bin/bash

SSH_CONFIG_FILE="$HOME/.ssh/config"

function add_server() {
    # no empty input should be allowed
    while true; do
        read -p "Server name (alias): " name
        if [[ -n "$name" ]]; then
            break
        else
            echo "‚ùå Server name cannot be empty. Please try again."
        fi
    done

    while true; do
        read -p "HostName (IP or domain): " hostname
        if [[ -n "$hostname" ]]; then
            break
        else
            echo "‚ùå HostName cannot be empty. Please try again."
        fi
    done

    while true; do
        read -p "User: " user
        if [[ -n "$user" ]]; then
            break
        else
            echo "‚ùå User cannot be empty. Please try again."
        fi
    done

    while true; do
        read -p "Port (optional, default 22): " port
        port=${port:-22}
        if [[ "$port" =~ ^[0-9]+$ ]]; then
            break
        else
            echo "‚ùå Port must be a number. Try again."
        fi
    done

    if grep -q "^Host $name\$" "$SSH_CONFIG_FILE" 2>/dev/null; then
        echo "‚ùå Host '$name' already exists in ~/.ssh/config"
        return 1
    fi

    mkdir -p ~/.ssh

    {
        echo ""
        echo "Host $name"
        echo "    HostName $hostname"
        echo "    User $user"
        echo "    Port $port"
    } >> "$SSH_CONFIG_FILE"

    echo "‚úÖ Host '$name' added to ~/.ssh/config"
}
function remove_server() {
    if ! command -v fzf &>/dev/null; then
        echo "‚ùå 'fzf' is not installed. Please install it first."
        return 1
    fi

    if [[ ! -f "$SSH_CONFIG_FILE" ]]; then
        echo "‚ùå No SSH config file found."
        return 1
    fi

    local selected=$(grep '^Host ' "$SSH_CONFIG_FILE" | awk '{print $2}' | fzf --prompt="Select a host to remove: ")

    if [[ -z "$selected" ]]; then
        echo "‚ùå No host selected."
        return 1
    fi

    awk -v host="$selected" '
        BEGIN {skip=0}
        $1 == "Host" && $2 == host {skip=1; next}
        $1 == "Host" {skip=0}
        !skip {print}
    ' "$SSH_CONFIG_FILE" > "${SSH_CONFIG_FILE}.tmp" && mv "${SSH_CONFIG_FILE}.tmp" "$SSH_CONFIG_FILE"

    echo "‚úÖ Host '$selected' removed from ~/.ssh/config"
}
function list_servers() {
    if [[ ! -f "$SSH_CONFIG_FILE" ]]; then
        echo "‚ùå No SSH config file found."
        return
    fi

    # Parse config into associative array: host_alias -> hostname
    declare -A host_map

    current_host=""
    while IFS= read -r line; do
        # Remove leading/trailing spaces
        line_trimmed=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

        # Skip empty lines and comments
        [[ -z "$line_trimmed" || "$line_trimmed" =~ ^# ]] && continue

        if [[ "$line_trimmed" =~ ^Host[[:space:]]+(.+) ]]; then
            current_host="${BASH_REMATCH[1]}"
        elif [[ "$line_trimmed" =~ ^HostName[[:space:]]+(.+) ]] && [[ -n "$current_host" ]]; then
            host_map["$current_host"]="${BASH_REMATCH[1]}"
        fi
    done < "$SSH_CONFIG_FILE"

    count=0
    for alias in "${!host_map[@]}"; do
        count=$((count+1))
        hostname=${host_map[$alias]}

        # Ping hostname
        ping -c1 -W1 "$hostname" &>/dev/null
        if [ $? -eq 0 ]; then
            status="üü¢ Online"
        else
            status="üî¥ Offline"
        fi

        printf "üéØ \033[1;33m%2d\033[0m. \033[1;32m%-15s\033[0m | %s\n" \
            "$count" "$alias" "$status"
    done

    echo -e "üß† Total Hosts: \033[1;35m$count\033[0m\n"
}
function ssh_server() {
    if ! command -v fzf &>/dev/null; then
        echo "‚ùå 'fzf' is not installed. Please install it first."
        return 1
    fi

    if [[ ! -f "$SSH_CONFIG_FILE" ]]; then
        echo "‚ùå No SSH config file found."
        return 1
    fi

    # List all Host aliases
    local hosts
    hosts=$(grep '^Host ' "$SSH_CONFIG_FILE" | awk '{print $2}')

    if [[ -z "$hosts" ]]; then
        echo "‚ùå No hosts found in ~/.ssh/config"
        return 1
    fi

    # Use fzf to select a host
    local selected
    selected=$(echo "$hosts" | fzf --prompt="Select SSH host: ")

    if [[ -z "$selected" ]]; then
        echo "‚ùå No host selected."
        return 1
    fi

    echo "üîë Connecting to '$selected'..."
    ssh "$selected"
}

function edit_server() {


    if [[ ! -f "$SSH_CONFIG_FILE" ]]; then
        echo "‚ùå No SSH config file found."
        return 1
    fi

    local selected=$(grep '^Host ' "$SSH_CONFIG_FILE" | awk '{print $2}' | fzf --prompt="Select a host to edit: ")

    if [[ -z "$selected" ]]; then
        echo "‚ùå No host selected."
        return 1
    fi
   # Get the current values for the selected host
    old_hostname=$(awk -v host="$selected" '
        $1 == "Host" && $2 == host { in_block = 1; next }
        in_block && $1 == "Host" { exit }
        in_block && $1 == "HostName" { print $2 }
    ' "$SSH_CONFIG_FILE")

    old_port=$(awk -v host="$selected" '
        $1 == "Host" && $2 == host { in_block = 1; next }
        in_block && $1 == "Host" { exit }
        in_block && $1 == "Port" { print $2 }
    ' "$SSH_CONFIG_FILE")

    old_user=$(awk -v host="$selected" '
        $1 == "Host" && $2 == host { in_block = 1; next }
        in_block && $1 == "Host" { exit }
        in_block && $1 == "User" { print $2 }
    ' "$SSH_CONFIG_FILE")

    read -p "HostName [$old_hostname]: " new_hostname
    new_hostname=${new_hostname:-$old_hostname}

    read -p "User [$old_user]: " new_user
    new_user=${new_user:-$old_user}

    while true; do
        read -p "Port [$old_port]: " new_port
        new_port=${new_port:-$old_port}
        if [[ "$new_port" =~ ^[0-9]+$ ]]; then
            break
        else
            echo "‚ùå Port must be a number. Try again."
        fi
    done

    # Remove old block
    awk -v host="$selected" '
        BEGIN { in_block = 0 }
        $1 == "Host" && $2 == host { in_block = 1; next }
        $1 == "Host" && in_block == 1 { in_block = 0 }
        in_block == 0 { print }
    ' "$SSH_CONFIG_FILE" > "${SSH_CONFIG_FILE}.tmp" && mv "${SSH_CONFIG_FILE}.tmp" "$SSH_CONFIG_FILE"
# Add updated block
{
    echo ""
    echo "Host $selected"
    echo "    HostName $new_hostname"
    echo "    User $new_user"
    echo "    Port $new_port"
} >> "$SSH_CONFIG_FILE"

echo "‚úÖ Host '$selected' updated"
}   

function show_help() {
    echo "Usage:"
    echo "  server add                 # Add a new SSH server entry"
    echo "  server rm|remove|del       # Remove an SSH server entry"
    echo "  server edit                # Edit an existing SSH server entry"
    echo "  server ls                  # List all SSH server aliases with ping status"
    echo "  server ssh                 # Connect to a server via SSH"
    echo "  server --help              # Show this help message"
}


case "$1" in
    add)
        add_server
        ;;
    rm|remove|del|delete)
        remove_server
        ;;
    edit)
        edit_server
        ;;
    list|ls)
        list_servers
        ;;
    ssh|"")
        ssh_server
        ;;
    --help|-h)
        show_help
        ;;
    *)
        echo "‚ùå Unknown command: $1"
        show_help
        ;;
esac
